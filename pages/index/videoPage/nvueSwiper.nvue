<template>
	<view class="nvue-swiper-wrap">
		<image class="back-icon" src="@/static/home/back.png" mode="aspectFit" @click="goBack"></image>
		<view class="red-paper-box" v-if="isShowPaper">
			<image :style="{transform: 'rotate(' + rightGiftCircleCss + 'deg)'}" class="circle-right" src="@/static/home/semi-circle.png" mode="aspectFit"></image>
			<image :style="{transform: 'rotate(' + leftGiftCircleCss + 'deg)'}" class="circle-left" src="@/static/home/semi-circle.png" mode="aspectFit"></image>
			<view v-if="this.redPaperTime <= this.paperGiftTime / 2" class="circle-left-mask"></view>
			<image class="red-paper" src="@/static/home/red-paper.png" mode="aspectFit"></image>
		</view>
		<!-- #ifdef MP -->
		<swiper :style="'width: '+ windowWidth +'px; height: '+ windowHeight +'px; background-color: #000000;'" :vertical="true" @animationfinish="animationfinish" @change="change" :current="current" :indicator-dots="false" @touchstart="mpTouchstart" @touchend="mpTouchend">
			<swiper-item v-for="(list,index) in dataList" :key="index">
				<view v-if="Math.abs(k-index)<=1">
					<view>
						<!-- 
						1.v-if：用于控制视频在节点的渲染数
						2.muted的默认值是 false，代表默认是禁音视频的
						3.http-cache默认开启视频缓存
						4.poster（封面（方案一））：这里的封面默认处理存储在阿里云的视频
						5.show-loading：这里默认去掉播放转圈的标志
						v-if="Math.abs(k-index)<=1"
						 -->
						<video
						v-if="isShow"
						:id="list._id+''+index"
						:ref="list._id+''+index"
						:loop="true"
						:muted="list.isplay"
						:controls="false"
						:http-cache="true"
						:page-gesture="false"
						:show-fullscreen-btn="false"
						:show-loading="false"
						:show-center-play-btn="false"
						:enable-progress-gesture="false"
						:src="list.src"
						@ended="ended"
						@click="tapVideoHover(list.state,$event)"
						:style="'width: '+ windowWidth +'px; height: '+ windowHeight +'px; background-color: #000000; z-index: -1;'"
						:poster="list.cover"
						></video>
						<!-- 
						1.这里是封面（方案二）：这里的封面可以自定义。
						2.也在代码中做了批注，两种方案可以共存，不会相互影响。
						-->
						<!-- <image
						v-if="!list.playIng"
						:src="list.cover"
						:style="'width: '+ windowWidth +'px; height: '+ windowHeight +'px; position: absolute;'"
						mode="aspectFit"
						></image> -->
					</view>
					<!-- 播放状态：pause 的时候就会暂停 -->
					<view class="videoHover" @click="tapVideoHover(list.state,$event)" :style="'width: '+ windowWidth +'px; height: '+ windowHeight +'px;'">
						<image v-if="list.state=='pause'" class="playState" src="@/static/shortVideo/index/play.png"></image>
					</view>
					<!-- 用户头像视频简介等 -->
					<view class="bottom-wrap">
						<view class="creator-wrap">
							<view class="creator-box">
								<image class="avator" :src="list.href" mode="aspectFit" @click="goAuthorPage(list.authorId)"></image>
								<view class="creator-detail">
									<view class="detail1">
										<text class="title" @click="goAuthorPage(list.authorId)">@{{list.username}}</text>
										<view class="follow" @click="collectShortVideo(list)">
											<text class="follow-txt" v-if="!list.isFollow">+关注</text>
											<text class="follow-txt" v-if="list.isFollow">已关注</text>
										</view>
									</view>
									<!-- <text class="share">{{creatorData.shareNum}}人已转发</text> -->
								</view>
							</view>
							<text class="detail-desc">{{list.msg}}</text>
						</view>
						
						<view class="barrage-wrap">
							<view class="barrage-box">
								<view class="barrage">
									<text class="tag">弹</text>
									<view class="msg">
										<!-- <text class="line"></text> -->
										<view class="line"></view>
										<text class="txt">发送弹幕</text>
									</view>
								</view>
								<view class="follow-wrap" @click="cLike(list)">
									<view class="follow">
										<image v-if="list.like" class="love" src="/static/home/collected.png" mode="aspectFit"></image>
										<image v-if="!list.like" class="love" src="/static/home/collect.png" mode="aspectFit"></image>
										<text class="love-num">{{list.like_n}}</text>
									</view>
								</view>
							</view>
							<view class="line-wrap">
								<view class="bottom-line"></view>
							</view>
						</view>
					</view>
				</view>
			</swiper-item>
		</swiper>
		<!-- #endif -->
		<!-- #ifdef H5 -->
		<swiper :style="'width: '+ windowWidth +'px; height: '+ windowHeight +'px; background-color: #000000;'" :vertical="true" @animationfinish="animationfinish" @change="change" :current="current" :indicator-dots="false" :duration="duration">
			<swiper-item v-for="(list,index) in dataList" :key="index">
				<view v-if="Math.abs(k-index)<=1">
					<view>
						<!-- 
						1.v-if：用于控制视频在节点的渲染数
						2.muted的默认值是 false，代表默认是禁音视频的
						3.http-cache默认开启视频缓存
						4.poster（封面（方案一））：这里的封面默认处理存储在阿里云的视频
						5.show-loading：这里默认去掉播放转圈的标志
						v-if="Math.abs(k-index)<=1"
						 -->
						<video
						v-if="isShow"
						:id="list._id+''+index"
						:ref="list._id+''+index"
						:loop="true"
						:muted="list.isplay"
						:controls="false"
						:http-cache="true"
						:page-gesture="false"
						:show-fullscreen-btn="false"
						:show-loading="false"
						:show-center-play-btn="false"
						:enable-progress-gesture="false"
						:src="list.src"
						@ended="ended"
						@click="tapVideoHover(list.state,$event)"
						:style="'width: '+ windowWidth +'px; height: '+ windowHeight +'px; background-color: #000000; z-index: -1;'"
						:poster="list.cover"
						></video>
						<!-- 
						1.这里是封面（方案二）：这里的封面可以自定义。
						2.也在代码中做了批注，两种方案可以共存，不会相互影响。
						-->
						<!-- <image
						v-if="!list.playIng"
						:src="list.cover"
						:style="'width: '+ windowWidth +'px; height: '+ windowHeight +'px; position: absolute;'"
						mode="aspectFit"
						></image> -->
					</view>
					<!-- 播放状态：pause 的时候就会暂停 -->
					<view class="videoHover" @click="tapVideoHover(list.state,$event)" :style="'width: '+ windowWidth +'px; height: '+ windowHeight +'px;'">
						<image v-if="list.state=='pause'" class="playState" src="@/static/shortVideo/index/play.png"></image>
					</view>
					<!-- 用户头像视频简介等 -->
					<view class="bottom-wrap">
						<view class="creator-wrap">
							<view class="creator-box">
								<image class="avator" :src="list.href" mode="aspectFit" @click="goAuthorPage(list.authorId)"></image>
								<view class="creator-detail">
									<view class="detail1">
										<text class="title" @click="goAuthorPage(list.authorId)">@{{list.username}}</text>
										<view class="follow" @click="collectShortVideo(list, false)">
											<text class="follow-txt" v-if="!list.isFollow">+关注</text>
											<text class="follow-txt" v-if="list.isFollow">已关注</text>
										</view>
									</view>
									<!-- <text class="share">{{creatorData.shareNum}}人已转发</text> -->
								</view>
							</view>
							<text class="detail-desc">{{list.msg}}</text>
						</view>
						
						<view class="detail-slider">
							<slider class="slider-line" :block-size="!isDragging ? '8' : '14'"
								min="0" :max="dataList[k].duration"
								:value="endTime" @change="sliderChange"
								@changing="touchstartFn" backgroundColor="#e9e9e9"
								step="1" activeColor="#5DE89B" />
						</view>
						
						<view class="barrage-wrap">
							<view class="barrage-box">
								<view class="barrage">
									<text class="tag">弹</text>
									<view class="msg" @click="notSupportTip">
										<!-- <text class="line"></text> -->
										<view class="line"></view>
										<text class="txt">发送弹幕</text>
									</view>
								</view>
								<view class="follow-wrap" @click="cLike(list)">
									<view class="follow">
										<image v-if="list.like" class="love" src="/static/home/collected.png" mode="aspectFit"></image>
										<image v-if="!list.like" class="love" src="/static/home/collect.png" mode="aspectFit"></image>
										<text class="love-num">{{list.like_n}}</text>
									</view>
								</view>
							</view>
							<view class="line-wrap">
								<view class="bottom-line"></view>
							</view>
						</view>
					</view>
					
				</view>
			</swiper-item>
		</swiper>
		<!-- #endif -->
	</view>
</template>

<script>
	import {
		postVaasVideoFeed,
	} from "@/api/api.js"
	import {
		postVaasFeedback,
		postVaasVideoPlay,
		postVaasVideoCpvideos,
		postVaasLogPlay,
		postVaasLogPlayTm,
		postVaasLogShow,
		getVaasFeedbackList,
	} from "@/api/videoApi.js"
	
	let audo = uni.createInnerAudioContext()
	audo.loop = true
	
	function debounce(fn, delay = 200) {
		let flag;
		let timer;
		return function() {
			let that = this;
			if (flag) clearTimeout(timer)
			flag = true
			timer = setTimeout(() => {
				flag = false
				fn.call(that)
			}, delay)
		}
	}
	
	export default {
		data() {
			return {
				windowWidth: 0,
				windowHeight: 0,
				platform: "",
				model: "",
				deleteHeight: 0,
				dataList: [],
				k: 0,
				oldVideo: "",
				voice: "",
				timeout: "",
				current: 0,
				boxStyle:{//视频，图片封面样式🌟💗
					'height': 0,
					'width': 0,
				},
				
				videoID: "",
				isShow: false,
				
				showPlay: false,//转轮显示控制
				rotates: 0,//转轮旋转角度
				rotateTime: "",//转轮递归事件控制
				xrotats: "",
				
				mpcleartime: "",
				
				isClick: false,
				
				changeTimeout: "",
				mptime: 0,
				mpstartTime: 0,
				
				duration: 500,
				creatorData: {}, // 作者/视频简介
				
				channelsId: '30483', // 只要影视短视频id, 暂时写死
				videoType: 1,
				platformType: 3,
				isAuthorPage: 0, // 0 不是 1是查看作者的所有作品
				authorPage: 1, // 作者列表的接口page参数
				authorId: '', // 作者id
				hasMore: true, // 是否还有更多作者视频
				timer: null, // 记录视频播放是否超过5s
				videoDuration: 0, // 视频总时长
				startTime: 0, // 视频开始时间,
				endTime: 0, // endTime - startTime == videoDuration 划走视频时是否看完视频
				endTimer: null, // 记录当前播放进度
				
				isShowProgressBarTime: false,//是否拖动进度条，如果拖动（true）则显示进度条时间，否则不显示（false）【1.0.4已废弃，但是意思需要记住】
				isDragging: false,//false代表停止滑动🌟💗
				
				paperGiftTime: 15, // 播放15s获得奖励
				isShowPaper: false, // 开始显示红包并计时
				redPaperTime: 0, // 红包开始时间
				redPaperTimer: null, // 红包计时器
				btStamp: 0, // 红包开始时间戳
				etStamp: 0, // 结束时间戳
			}
		},
		watch:{
			async k(k,old_k){
				// console.log(k, old_k)
				// #ifndef MP
				this.clearToTime();
				// #endif
				this.isShow = false
				this.dataList[old_k].playIng = false//如果视频暂停，就加载封面
				this.dataList[old_k].isplay = true
				this.dataList[old_k].state = 'pause'
				// await this.getIndexVideoSrc(old_k)
				console.log('预留第' + (old_k + 1) + '个视频：' + this.dataList[old_k]._id+''+old_k)
				// 2.0版本已经去掉了下面这一句，视频不用暂停，只需要把声音禁止就行
				uni.createVideoContext(this.dataList[old_k]._id + '' + old_k,this).stop()//如果视频暂停，那么旧视频停止，这里的this.dataList[old_k]._id + '' + old_k，后面加 old_k 是为了每一个视频的 id 值不同，这样就可以大程度的避免串音问题
				console.log('已经暂停 --> 第' + (old_k + 1) + '个视频～')//提示
				this.dataList[k].state = 'play'
				this.isShow = true
				this.xrotats = setTimeout(()=>{
					this.showPlay = true;
					// #ifndef MP
					this.rotateX();
					// #endif
				},200)
				this.logVideoPlayTm();
				// #ifdef MP
				// 如果是小程序端
				clearTimeout(this.changeTimeout);
				this.dataList[k].isplay = false
				setTimeout(()=>{
					this.dataList[k].playIng = true
				},250)
				if(this.mptime < 0.2){
					this.changeTimeout = setTimeout(()=>{
						uni.createVideoContext(this.dataList[this.k]._id+''+this.k,this).play()
					},1400)
				} else {
					uni.createVideoContext(this.dataList[this.k]._id+''+this.k,this).play()
				}
				// #endif
				// #ifdef H5
				this.dataList[k].isplay = true
				if (!this.dataList[k].src) return
				audo.src = this.dataList[k].src
				if(this.isClick){
					setTimeout(()=>{
						if (typeof WeixinJSBridge == "undefined") {
							setTimeout(()=>{
								audo.play()
								uni.createVideoContext(this.dataList[k]._id+''+k,this).seek(0)
								uni.createVideoContext(this.dataList[k]._id+''+k,this).play()
								setTimeout(()=>{
									this.dataList[k].playIng = true
								},650)
							},500)
						} else {
							WeixinJSBridge.invoke('getNetworkType', {}, e => {
								setTimeout(()=>{
									audo.play()
									uni.createVideoContext(this.dataList[k]._id+''+k,this).seek(0)
									uni.createVideoContext(this.dataList[k]._id+''+k,this).play()
									setTimeout(()=>{
										this.dataList[k].playIng = true
									},850)
								},200)
							})
						}
					},200)
					this.logRedPaperTime();
					this.logVideoPlay()
				} else {
					audo.pause()
					this.dataList[k].state = 'pause'
					uni.createVideoContext(this.dataList[k]._id+''+k,this).seek(0)
					uni.createVideoContext(this.dataList[k]._id+''+k,this).pause()
				}
				// #endif
				var p = k+1;
				console.log('预加载第' + (p + 1) + '个视频：' + this.dataList[p]._id+''+p)
			}
		},
		computed: {
			leftGiftCircleCss() {
				if (this.redPaperTime > this.paperGiftTime || !this.isShowPaper) {
					this.isShowPaper = false
					this.redPaperTime = 0;
					clearInterval(this.redPaperTimer)
					this.etStamp = Date.parse(new Date()) / 1000; // 获取红包开始的时间戳(s)
					if (this.btStamp !== 0) {
						this.postVaasLogPlayTm(this.btStamp, this.etStamp)
						this.btStamp = 0
						this.etStamp = 0
					}
					return 180;
				}
				const deg = 360 / this.paperGiftTime
				return this.redPaperTime * deg + 180;
			},
			rightGiftCircleCss() {
				const deg = 360 / this.paperGiftTime
				if (this.redPaperTime <= Math.floor(this.paperGiftTime / 2)) {
					return this.redPaperTime * deg + 180;
				} else {
					return 360;
				}
			},
		},
		async onLoad(e) {
			this.isAuthorPage = e.isAuthor;
			this.authorId = e.authorId;
			this.getSessionId()
			this.getPlatform();
			this.platform = uni.getSystemInfoSync().platform
			this.model = uni.getSystemInfoSync().model
			var model = this.model
			if(this.platform == 'ios' && (model !== 'iPhone6' || model !== 'iPhone6s' || model !== 'iPhone7' || model !== 'iPhone8')){
				this.deleteHeight = 0//有 tabbar的 修改这里可以改变视频高度
			}
			this.windowWidth = uni.getSystemInfoSync().windowWidth
			this.windowHeight = uni.getSystemInfoSync().windowHeight
			this.boxStyle.width = this.windowWidth + 'px'//给宽度加px
			this.boxStyle.height = this.windowHeight - this.deleteHeight;//有 tabbar的 修改这里可以改变视频高度
			// 获取上一个页面的视频列表缓存
			let vaasList = [];
			let videoInfo = this.$store.state.video;
			if (this.isAuthorPage == 1) {
				vaasList = videoInfo.vaasAuthorList;
				this.current = videoInfo.aK;
				this.k = videoInfo.aK;
				this.authorPage = videoInfo.authorPage
				this.authorId = videoInfo.authorId ? videoInfo.authorId : this.authorId;
			} else {
				vaasList = videoInfo.vaasList;
				this.current = videoInfo.k;
				this.k = videoInfo.k;
			}
			/// 若缓存存在, 直接处理; 不在, 则重新获取接口
			if (vaasList.length) {
				this.getInitVideoListFormat(vaasList)
			} else {
				// this.get() 
				if (this.isAuthorPage == 1) {
					this.postVaasVideoCpvideos()
				} else {
					this.getShortVideo() //刚进入页面加载数据
				}
			}
			// #ifndef MP
			// this.rotateX();
			// #endif
		},
		onShow(){
			console.log('回到前台');
			if(this.dataList.length !== 0){
				// #ifdef MP
				this.dataList[this.k].state = 'play';
				uni.createVideoContext(this.dataList[this.k]._id+''+this.k,this).play()
				audo.src = this.dataList[this.k].src
				// #endif
				// #ifdef H5
				if(this.isClick){
					this.dataList[this.k].state = 'play';
					uni.createVideoContext(this.dataList[this.k]._id+''+this.k,this).seek(0)
					uni.createVideoContext(this.dataList[this.k]._id+''+this.k,this).play()
					audo.src = this.dataList[this.k].src
					audo.play()
				}
				// #endif
			}
		},
		onHide(){
			// #ifdef MP
			this.dataList[this.k].state = 'pause';
			uni.createVideoContext(this.dataList[this.k]._id+''+this.k,this).pause()
			// #endif
			// #ifdef H5
			if(this.isClick){
				this.dataList[this.k].state = 'pause';
				uni.createVideoContext(this.dataList[this.k]._id+''+this.k,this).pause()
				audo.pause()
			}
			// #endif
			this.postVaasLogPlayTm()
			console.log('到后台');
		},
		methods: {
			mpTouchend(){
				this.mptime = (new Date()/1000) - this.mpstartTime;
			},
			mpTouchstart(){
				this.mpstartTime = (new Date()/1000);
			},
			dealVoice(){
				uni.showToast({
					title: '处理声音',
					icon: 'none'
				})
			},
			clearToTime(){
				//清理定时器
				for(let i=0;i<20;i++){
					clearTimeout(this.rotateTime);
					clearTimeout(this.xrotats);
					this.showPlay = false;
					this.rotates = 0;
				}
			},
			clearTime(){
				//清理定时器
				for(let i=0;i<20;i++){
					clearTimeout(this.rotateTime);
					clearTimeout(this.xrotats);
				}
			},
			rotateX(){
				// clearTimeout(this.rotateTime);
				this.rotateTime = setTimeout(()=>{
					this.rotateX();
					this.showPlay = true;
					this.rotates += 1;
				},30)
			},
			closeScrollview(){
				// 点击评论里面的叉叉，就会关闭评论
				this.$refs.pinglun.close();
			},
			ended(){
				// 1.播放当前视频结束时触发，自动切换下一个视频
				// this.current = this.k+1
			},
			//点击播放&&暂停
			tapVideoHover(state,event){
				console.log('state--',state);
				if(state=='play'||state=='continue'){
					this.dataList[this.k].state = 'pause';
				}else{
					this.dataList[this.k].state = 'continue';
				}
				if(this.dataList[this.k].state == 'continue'){
					if (!this.isClick) {
						/// 首次点击播放超过5s则上报视频
						this.logVideoPlay();
						/// 点击播放时才开始计算红包
						this.logRedPaperTime();
					}
					this.isClick = true;
					this.dataList[this.k].playIng = true
					uni.createVideoContext(this.dataList[this.k]._id+''+this.k,this).play();//暂停以后继续播放
					this.logVideoPlayTm();
					// #ifdef MP
					this.dataList[this.k].isplay = false
					// #endif
					// #ifdef H5
					audo.play()
					// #endif
				}
				if(this.dataList[this.k].state == 'pause'){
					clearInterval(this.endTimer)
					uni.createVideoContext(this.dataList[this.k]._id+''+this.k,this).pause();//暂停以后继续播放
					// #ifdef MP
					this.dataList[this.k].isplay = true
					// #endif
					// #ifdef H5
					audo.pause()
					// #endif
				}
			},
			async change(event){
				// 出现在屏幕上则曝光视频
				this.postVaasLogShow();
				// 切换视频时上报当前视频时长
				this.postVaasLogPlayTm()
				// 切换视频时清除已有定时器
				this.clearVideoTime()
				let videoSrc = await this.getShortVideoUrl(event.detail.current)
				this.dataList[event.detail.current].src = videoSrc
				this.k = event.detail.current
				if (typeof this.dataList[event.detail.current].isFollow !== 'boolean') this.getVaasFeedbackList()
			},
			animationfinish(event){
				// 1.这里进行判断，如果是最后一个视频就进入 get() 方法加载视频进入列表
				if(this.k == this.dataList.length - 1){
					// this.GET()
					if (this.isAuthorPage == 1) { // 加载作者作品
						this.postVaasVideoCpvideos(false)
					} else {
						this.getShortVideo2()
					}
				}
			},
			share(){
				uni.showToast({
					title: '分享',
					icon: 'none'
				})
			},
			toComment(index){
				// 注意点击评论之后会执行这里
				/*
				（1）先加载缓冲
				（2）获取当前视频 ID 信息
				（3）🌟🌟🌟🌟重要🌟🌟🌟🌟
					- 一定要记得看 index.vue 里面
					 uni.setStorageSync("user",this.peopleList[i]);
					 这个东西，用于存储当前用户信息。在 插件里面会使用到这个东西，
					 记得写一下。
					 
				（4）打开评论
				*/ 
				uni.showToast({
					title: '加载中...',
					icon: 'none',
					position: 'bottom',
					duration: 300
				})
				uni.setStorageSync("videoID",this.dataList[index]._id);
				this.videoID = this.dataList[index]._id;
				this.$refs.pinglun.open('bottom')
			},
			cLike(item){
				this.collectShortVideo(item)
				// this.dataList[this.k].like = !this.dataList[this.k].like
				// const video = this.dataList[this.k];
				item.like?item.like_n -= 1:item.like_n += 1;
			},
			//每一组结束时新的请求
			async getShortVideo2() {
				let data = {
				  channelId: this.channelsId, // 频道ID
				  loadType: 0, // 加载类型,0-上拉，1-下拉，2-首次刷新；默认：0
				  platform: this.platformType, // 平台类型：1-Android，2-iOS，3-H5，4-小程序，5-web，当前默认；3
				  size: 8, 
				  videoType: this.videoType  // 视频类型，1-横屏，2-竖屏
				}
				let res = await postVaasVideoFeed(data)
				if (res.code == 200) {
					var msg = res.data
					// 2.这里把视频添加到视频列表
					for (let i = 0; i < msg.length; i++) {
						this.dataList.push(new ShortVideoType(msg[i]))
					}
				}
			},
			async getShortVideoUrl(k) {
				let data = { id: this.dataList[k]._id, platform: this.platformType }
				let res = await postVaasVideoPlay(data)
				if (res && res.data && res.data.length > 0) {
					return res.data[0].uri
				} else {
					return ''
				}
			},
			async getShortVideo() {
				let data = {
				  channelId: this.channelsId, // 频道ID
				  loadType: 0, // 加载类型,0-上拉，1-下拉，2-首次刷新；默认：0
				  platform: this.platformType, // 平台类型：1-Android，2-iOS，3-H5，4-小程序，5-web，当前默认；3
				  size: 8, 
				  videoType: this.videoType  // 视频类型，1-横屏，2-竖屏
				}
				uni.showLoading({
					title: '加载中...',
					mask: true
				});
				let res = await postVaasVideoFeed(data)
				uni.hideLoading();
				if (res.code == 200) {
					var msg = res.data
					this.getInitVideoListFormat(msg)
				}
			},
			postVaasVideoCpvideos(isInit = true) {
				let data = {
					id: this.authorId,
					page: this.authorPage,
					platform: this.platformType,
					size: 20,
					videoType: this.videoType
				}
				uni.showLoading({
					title: '加载中...',
					mask: true
				});
				postVaasVideoCpvideos(data).then(res => {
					uni.hideLoading();
					if (res.code === 200) {
						let msg = res.data
						if (msg && data.length) {
							this.authorPage++
						} else {
							this.hasMore = false
						}
						if (isInit) {
							this.getInitVideoListFormat(msg)
						} else {
							this.hasMore = true;
							// this.dataList = this.dataList.concat(msg)
							// 2.这里把视频添加到视频列表
							for (let i = 0; i < msg.length; i++) {
								this.dataList.push(new ShortVideoType(msg[i]))
							}
						}
					} else {
						uni.showToast({
							title: res.msg || res.message,
							icon: 'none'
						})
					}
				})
			},
			/// 获取接口数据后, 将数据转化为页面所需参数
			async getInitVideoListFormat(msg) {
				this.isShow = false;
				// 2.这里把视频添加到视频列表
				for (let i = 0; i < msg.length; i++) {
					this.dataList.push(new ShortVideoType(msg[i]))
				}
				// 出现在屏幕上则曝光视频
				this.postVaasLogShow();
				this.getVaasFeedbackList(); // 是否关注该作者
				// 获取视频播放地址
				await this.getIndexVideoSrc(this.k);
				// 3.播放当前视频
				setTimeout(()=>{
					this.isShow = true;
					// #ifdef H5
					this.dataList[this.k].isplay = true;
					// #endif
					// #ifdef MP
					// 如果是小程序端
					this.dataList[this.k].isplay = false
					this.dataList[this.k].state = 'play'
					// #endif
					this.dataList[this.k].playIng = true
					setTimeout(async ()=>{
						// #ifdef H5
						// uni.createVideoContext(this.dataList[this.k]._id+''+this.k,this).seek(0)
						// uni.createVideoContext(this.dataList[this.k]._id+''+this.k,this).pause()
						// this.dataList[this.k].state = 'pause';
						audo.src = this.dataList[this.k].src;
						/// 自动播放
						this.tapVideoHover(this.dataList[this.k].state)
						// #endif
						// #ifdef MP
						uni.createVideoContext(this.dataList[this.k]._id+''+this.k,this).play()
						// #endif
					},500)
				}, 200)
				this.videoID = this.dataList[this.k]._id
			},
			// 根据下标获取相应的页面
			async getIndexVideoSrc(k) {
				if (this.dataList[k]?.hasGetUrl && this.dataList[k].src) return;
				let videoSrc = await this.getShortVideoUrl(k)
				this.dataList[k].src = videoSrc
			},
			// 点赞关注
			collectShortVideo(item, isLike = true) {
			 	if (this.sessionId) {
					let action = !isLike 
						? !item.isFollow ? 'follow' : 'disFollow'
						: item.like ? 'dislike' : 'like'
			 		let data = {
			 			action: action, 
			 			videoId: item._id,
						cpId: item.userID,
						platform: this.platformType,
						sessionId: this.sessionId,
						// userId: item.userID
			 		}
					postVaasFeedback(data).then(res => {
						if (res && res.code == 200) {
							this.dataList.forEach((item, index) => {
								if (item._id == this.dataList[this.k]._id) {
									if (isLike) {
										item.like = !item.like
									} else {
										item.isFollow = !item.isFollow
									}
								}
							})
							this.$forceUpdate(this.dataList)
						} else {
							uni.showToast({
								title: res ? res.message ? res.message : res.msg : '请求失败',
								icon: 'none'
							})
						}
					})
			 	} else {
			 		uni.showToast({
			 		    title: '请先登录',
			 		    icon: 'none',
			 		    duration: 800
			 		});
			 		// uni.navigateTo({
			 		//     url: '/pages/index/longin/longin'
			 		// })
			 	}
			},
			getVaasFeedbackList() {
				let data = { action: 'follow' }
				getVaasFeedbackList(data).then(res => {
					if (res.code === 200) {
						let dataItem = this.dataList[this.k];
						let authorInfo = res.data.find(item => dataItem.authorId == item.cpId)
						this.dataList[this.k].isFollow = authorInfo ? true : false
						this.$forceUpdate(this.dataList)
					}
				})
			},
			getPlatform() {
				// 平台类型：1-Android，2-iOS，3-H5，4-小程序，5-web，当前默认；3
				let platform = uni.getSystemInfoSync().platform
				if (platform == 'android') {
					this.platform = 1
				} else if (platform == 'ios') {
					this.platform = 2
				} else if (platform == 'devtools') {
					this.platform = 4
				}
				// #ifdef H5
				this.platform = 3
				// #endif
			}, 
			getSessionId() {
				this.sessionId = uni.getStorageSync('sessionId');
			},
			stopVideo() {
				// #ifdef MP
				this.dataList[this.k].state = 'pause';
				uni.createVideoContext(this.dataList[this.k]._id+''+this.k,this).pause()
				// #endif
				// #ifdef H5
				if(this.isClick){
					this.dataList[this.k].state = 'pause';
					uni.createVideoContext(this.dataList[this.k]._id+''+this.k,this).pause()
					audo.pause()
				}
				// #endif
			},
			//返回
			goBack() {
				// #ifdef  APP-PLUS
				uni.navigateBack({
					delta: 1, //返回层数，2则上上页
				})
				// #endif
				// #ifdef H5
				history.back();
				// #endif
			},
			goAuthorPage(id) {
				uni.navigateTo({
					url: '/pages/index/videoPage/authorPage?authorId=' + id
				})
			},
			// 出现在屏幕中
			postVaasLogShow() {
				let data = {
					// logId: "", // 上报ID
					platform: this.platformType,
					pos: this.k + 1, // 视频在信息流或者相关页出现的位置，从1开始计算
					referPage: `channel_${this.channelsId}-feed`, // 展现来源，channel_xxx-feed页，vplaypage-相关页
					videoId: this.dataList[this.k].videoId
				}
				postVaasLogShow(data)
			},
			// 用户点击视频
			postVaasLogPlay() {
				let data = {
					// logId: "",
					platform: this.platformType,
					referPage: `channel_${this.channelsId}-feed`,
					taskId: this.getUuid(), // 播放任务唯一标识，可以采用uuid方式生成
					videoId: this.dataList[this.k].videoId
				}
				postVaasLogPlay(data)
			},
			postVaasLogPlayTm(bt, et) {
				let size = this.endTime - this.startTime;
				if (size < 5) return;
				let isBefore = this.dataList[this.k].duration > Math.round(size) ? 1 : 0
				let data = {
					  bt: bt ? bt : this.startTime, // 播放开始时间点，单位：秒
					  et: et ? et : this.endTime, // 播放结束时间点，单位：秒
					  platform: this.platformType, 
					  rt: bt ? 1 : isBefore, // 上报原因 0-正常结束 1-提前停止播放
					  taskId: this.getUuid(),
					  videoId: this.dataList[this.k].videoId
				}
				// console.log('postVaasLogPlayTm', data, this.dataList[this.k].duration);
				postVaasLogPlayTm(data)
			},
			// 曝光时间定时器
			logVideoPlay() {
				clearTimeout(this.timer)
				this.timer = setTimeout(() => {
					this.postVaasLogPlay()
				}, 5000)
			},
			// 播放时间计时器
			logVideoPlayTm() {
				clearInterval(this.endTimer)
				if (!this.isClick) return;
				this.endTimer = setInterval(() => {
					let context = this.$refs[this.dataList[this.k]._id+''+this.k]
					if (Array.isArray(context)) {
						this.endTime = Math.floor(context[0].currentTime)
					} else {
						this.endTime = Math.floor(context.currentTime)
					}
				}, 1000)
			},
			// 红包计时器
			logRedPaperTime() {
				this.btStamp = 0
				this.etStamp = 0
				this.redPaperTime = 0;
				this.isShowPaper = true
				clearInterval(this.redPaperTimer)
				this.btStamp = Date.parse(new Date()) / 1000; // 获取红包开始的时间戳(s)
				this.redPaperTimer = setInterval(() => {
					this.redPaperTime++
					// if (thsi.redPaperTime > this.paperGiftTime) clearInterval(this.redPaperTimer)
				}, 1000)
			},
			clearVideoTime() {
				this.isShowPaper = false;
				this.redPaperTime = 0;
				clearTimeout(this.timer)
				clearInterval(this.endTimer)
				this.endTime = 0;
				this.duration = 0;
			},
			/// 获取随机uuid
			getUuid () {
			  if (typeof crypto === 'object') {
			    if (typeof crypto.randomUUID === 'function') {
			      return crypto.randomUUID();
			    }
			    if (typeof crypto.getRandomValues === 'function' && typeof Uint8Array === 'function') {
			      const callback = (c) => {
			        const num = Number(c);
			        return (num ^ (crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (num / 4)))).toString(16);
			      };
			      return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, callback);
			    }
			  }
			  let timestamp = new Date().getTime();
			  let perforNow = (typeof performance !== 'undefined' && performance.now && performance.now() * 1000) || 0;
			  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {
			    let random = Math.random() * 16;
			    if (timestamp > 0) {
			      random = (timestamp + random) % 16 | 0;
			      timestamp = Math.floor(timestamp / 16);
			    } else {
			      random = (perforNow + random) % 16 | 0;
			      perforNow = Math.floor(perforNow / 16);
			    }
			    return (c === 'x' ? random : (random & 0x3) | 0x8).toString(16);
			  })
			},
			sliderChange(e) {
				// console.log('value 发生变化：' + e.detail.value)
				this.endTime = e.detail.value
				// this.isDragging = false
				setTimeout(() => {
					this.isDragging = false
				}, 2000)
				uni.createVideoContext(this.dataList[this.k]._id+''+this.k,this).seek(this.endTime)
				audo.currentTime = e.detail.value // 音画同步
				if(this.dataList[this.k].state == 'pause'){
					this.dataList[this.k].state = 'play'
					uni.createVideoContext(this.dataList[this.k]._id+''+this.k,this).play()
					audo.play()
				}
				if (!this.isClick) this.logVideoPlayTm()
			},
			touchstartFn() {
				if (!this.isDragging) {
					this.isDragging = true
				}
			},
			touchstartDeb: debounce(function () {
				if (this.isDragging) {
					this.isDragging = true
				}
			}),
			notSupportTip(tip) {
				uni.showToast({
					title: '暂不支持该功能',
					icon:"none"
				})
			},
		},
		destroyed() {
			this.stopVideo();
			clearTimeout(this.timer)
			clearInterval(this.endTimer)
			if (this.isAuthorPage == 1) {
				this.$store.commit({
					type: 'SET_VAAS_AUTHOR_LIST',
					vaasAuthorList: new FormatBack().formatBack(this.dataList),
				})
				this.$store.commit({
					type: 'SET_VAAS_AK',
					ak: this.k,
				})
				this.$store.commit({
					type: 'SET_VAAS_PARAMS',
					authorPage: this.authorPage,
					authorId: this.authorId
				})
			} else {
				this.$store.commit({
					type: 'SET_VAAS_LIST',
					vaasList: new FormatBack().formatBack(this.dataList)
				})
			}
		},
	}
	
	export class ShortVideoType {
		href = '';
		isShowProgressBarTime = false;
		isShowimage = false;
		isplay = true;
		like = false;
		like_n = 0;
		msg = '';
		pinlun = {};
		playIng = false;
		playNumber = 0;
		sms_n = 0;
		src = '';
		state = 'pause';
		title = '';
		userID = '';
		username = '';
		_id = '';
		constructor(obj) {
			this.href = obj.authorAvatar;
			this.isShowProgressBarTime = false;
			this.isShowimage = false;
			this.isplay = true;
			this.like = obj.isCollect;
			this.like_n = obj.likeNum;
			this.msg = obj.title;
			this.pinlun = {};
			this.playIng = false;
			this.playNumber = obj.playNum;
			this.sms_n = 0;
			this.src = obj.h5url;
			this.state = 'pause';
			this.title = obj.title;
			this.userID = obj.authorId;
			this.username = obj.authorName;
			this._id = obj.videoId;
			Object.assign(this, obj)
		}
	}
	export class FormatBack {
		formatBack(list) {
			let backList = []
			backList = list;
			// list.forEach(item => {
			// 	backList.push({
			// 		authorAvatar: item.href,
			// 		authorId: item.userID,
			// 		authorName: item.username,
			// 		category: item.category,
			// 		cover: item.cover,
			// 		duration: item.duration,
			// 		category: item.category,
			// 		duration: item.duration,
			// 		fileSize: item.fileSize,
			// 		pcUrl: item.pcUrl,
			// 		publishTime: item.publishTime,
			// 		shareUrl: item.shareUrl,
			// 		tags: item.tags,
			// 		videoH: item.videoH,
			// 		videoW: item.videoW,
			// 		h5Url: item.src,
			// 		playNum: item.playNumber,
			// 		title: item.msg,
			// 		isCollect: item.like,
			// 		isPlay: false,
			// 		videoId: item._id,
			// 		likeNum: item.like_n,
			// 	})
			// })
			return backList;
		}
	}
</script>

<style scoped lang="scss">
	.nvue-swiper-wrapv {
		position: relative;
	}
	.container {background-color: #000000;}
	.back-icon {
		width: 52rpx;
		height: 52rpx;
		position: fixed;
		left: 36rpx;
		// top: calc(var(--status-bar-height) + 56rpx);
		top: 100rpx;
		z-index: 1;
	}
	.item {
		/* width : 750rpx; */
		background-color: #000000;
		position: relative;
	}
	.videoHover{
		position: absolute;
		top: 0;
		left: 0;
		flex: 1;
		background-color: rgba(0,0,0,0.1);
		justify-content: center;
		align-items: center;
		
		/* border-style: dashed;
		border-color: #DD524D;
		border-width: 1px; */
	}
	.playState{
		width:  160rpx;
		height: 160rpx;
		opacity: 0.2;
	}
	.userInfo{
		position: absolute;
		bottom:110px;
		right: 10px;
		flex-direction: column;
		
	}
	.userAvatar{
		border-radius: 500%;
		margin-bottom: 15px;
		border-style: solid;
		border-width: 2px;
		border-color: #ffffff;
	}
	.userAvatar{
		width : 100rpx;
		height: 100rpx;
	}
	.likeIco,.shareIco,.commentIco{
		width : 60rpx;
		height: 60rpx;
		margin-top: 15px;
	}
	.likeNum,.commentNum,.shareTex{
		color: #ffffff;
		font-size: 30rpx;
		text-align: center;
		margin: 5px;
	}
	.likeNumActive{
		color: red;
	}
	.content{
	  width: 620rpx;
	  z-index: 99;
	  position: absolute;
	  bottom: 30px;
	  /* justify-content: center; */
	  padding: 15rpx;
	  flex-direction: column;
	  justify-content: flex-start;
	  color: #ffffff;
	}
	.userName {
	  font-size: 30rpx;
	  color: #ffffff;
	  margin-top: 80upx;
	}
	.words {
	  margin-top: 10rpx;
	  font-size: 30rpx;
	  color: #ffffff;
	}
	.root{
		background-color: #000000;
	}
	// ----------------------
	.creator-wrap {
		padding: 0 24rpx;
		display: flex;
		flex-direction: column;
		// padding-bottom: 8rpx;
		// margin-bottom: 8rpx;
		position: relative;
		padding-bottom: 8rpx;
	}
	.creator-wrap .detail-desc {
		// margin: 28rpx 0 14rpx;
		margin: 28rpx 0 22rpx;
		font-weight: 400;
		font-size: 28rpx;
		line-height: 32rpx;
		color: #FAFAFA;
		// overflow: hidden;
	}
	.creator-wrap .creator-box {
		display: flex;
		flex-direction: row;
		justify-content: flex-start;
		align-items: center;
	}
	.creator-wrap .avator {
		width: 84rpx;
		height: 84rpx;
		border-radius: 50%;
		background-color: #fafbfb;
		margin-right: 24rpx;
	}
	.creator-wrap .creator-detail {
		display: flex;
		flex-direction: column;
	}
	.creator-wrap .detail1 {
		display: flex;
		flex-direction: row;
		align-items: center;
	}
	.creator-wrap .title {
		font-weight: 400;
		font-size: 32rpx;
		line-height: 36rpx;
		color: #FAFAFA;
		margin-right: 20rpx;
	}
	.creator-wrap .follow {
		padding: 6rpx 20rpx;
		background: rgba(239, 237, 238, 0.3);
		border: 1px solid rgba(239, 237, 238, 0.7);
		border-radius: 40rpx;
	}
	.creator-wrap .detail1 .follow-txt {
		line-height: 34rpx;
		font-weight: 400;
		font-size: 24rpx;
		color: #FAFAFA;
	}
	.creator-wrap .share {
		font-weight: 400;
		font-size: 24rpx;
		line-height: 28rpx;
		color: #FAFAFA;
	}
	.bottom-wrap {
		position: absolute;
		bottom: 0;
		left: 0;
		right: 0;
	}
	.progress-wrap {
		left: 0;
		right: 0;
		bottom: -12upx;
		position: absolute;
		z-index: 3;
		margin-bottom: 6rpx;
		padding-bottom: 6rpx;
	}
	
	.barrage-wrap {
		// padding: 16rpx 24rpx 56rpx;
		padding: 16rpx 24rpx 0;
		background: rgba(5, 5, 6, 0.7);
		position: relative;
		display: flex;
		flex-direction: column;
		justify-content: center;
	}
	.barrage-wrap .barrage-box {
		display: flex;
		flex-direction: row;
		align-items: center;
	}
	.barrage-wrap .barrage {
		display: flex;
		flex-direction: row;
		align-items: center;
		// width: 146px;
		// height: 26px;
		background: #1D252B;
		// backdrop-filter: blur(15rpx);
		border-radius: 8rpx;
	}
	.barrage-wrap .barrage .tag {
		padding: 8rpx 14rpx;
		background: linear-gradient(138.65deg, rgba(93, 232, 155, 0.1) 2.95%, rgba(0, 104, 98, 0.1) 93.7%);
		border-radius: 8rpx;
		color: #5DE89B;
		font-weight: 800;
	}
	.barrage-wrap .barrage .msg {
		padding-right: 128rpx;
		position: relative;
		display: flex;
		flex-direction: row;
		align-items: center;
	}
	.barrage-wrap .barrage .line {
		margin: 0 8rpx;
		// border: 2rpx solid #939393;
		width: 2rpx;
		height: 20rpx;
		background-color: #939393;
	}
	.barrage-wrap .barrage .txt {
		// padding-left: 18rpx;
		color: #D8D8D8;
		font-size: 24rpx;
		font-weight: 400;
		line-height: 36rpx;
	}
	.barrage-wrap .follow-wrap .follow {
		display: flex;
		align-items: center;
	}
	.barrage-wrap .follow-wrap {
		display: flex;
		align-items: center;
	}
	.barrage-wrap .follow-wrap .follow {
		display: flex;
		flex-direction: row;
	}
	.barrage-wrap .follow-wrap .love {
		margin-left: 28rpx;
		margin-right: 14rpx;
		width: 48rpx;
		height: 48rpx;
	}
	.barrage-wrap .follow-wrap .love-num {
		font-weight: 400;
		font-size: 24rpx;
		line-height: 34rpx;
		color: #fff;
	}
	.barrage-wrap .line-wrap {
		display: flex;
		justify-content: center;
		align-items: center;
	}
	.barrage-wrap .bottom-line {
		margin: 30rpx 0 14rpx;
		background: #FFF;
		border-radius: 6rpx;
		height: 12rpx;
		width: 418rpx;
	}
	
	.detail-slider {
		padding: 0 24rpx;
	}
	.detail-slider .slider-line {
		margin-left: 0;
		margin-right: 0;
	}
	
	.red-paper-box {
		position: absolute;
		top: 260rpx;
		left: 40rpx;
		width: 88rpx;
		height: 88rpx;
		display: flex;
		justify-content: center;
		align-items: center;
		z-index: 3;
	}
	.red-paper-box .red-paper {
		width: 80rpx;
		height: 80rpx;
		position: absolute;
		z-index: 5;
	}
	.red-paper-box .circle-right, 
	.red-paper-box .circle-left,
	.red-paper-box .circle-left-mask {
		width: 44rpx;
		height: 88rpx;
		position: absolute;
		left: 50%;
		transform: rotate(180deg);
		// transform-origin: left;
		transform-origin: 1px 50%;
		z-index: 3;
	}
	.red-paper-box .circle-right {
		z-index: 3;
	}
	.red-paper-box .circle-left {
		z-index: 2;
	}
	.red-paper-box .circle-left-mask {
		z-index: 4;
		background-color: #000;
	}
</style>
